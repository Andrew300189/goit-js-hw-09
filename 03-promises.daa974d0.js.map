{"mappings":"gfAAAA,EAAA,Q","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Функция, которая создает и возвращает промисы с задержкой\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  // Получаем значения из полей формы\n  const form = event.target;\n  const delay = parseInt(form.elements.delay.value);\n  const step = parseInt(form.elements.step.value);\n  const amount = parseInt(form.elements.amount.value);\n\n  // Очищаем консоль перед новыми сообщениями\n  console.clear();\n\n  // Создаем промисы с заданными значениями\n  for (let i = 1; i <= amount; i++) {\n    createPromise(i, delay).then(\n      ({ position, delay }) => {\n        Notiflix.Notify.Success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      },\n      ({ position, delay }) => {\n        Notiflix.Notify.Failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    );\n    delay += step;\n  }\n}\n"],"names":["parcelRequire"],"version":3,"file":"03-promises.daa974d0.js.map"}